#!/usr/bin/env python3
"""
Test para verificar restricciones de autenticaci√≥n en car-detail page
"""
from playwright.sync_api import sync_playwright
import sys

def test_unauthenticated_restrictions():
    """Verifica que usuarios no autenticados vean las restricciones correctas"""

    with sync_playwright() as p:
        # Lanzar navegador
        browser = p.chromium.launch(headless=False, slow_mo=1000)
        context = browser.new_context()

        # Limpiar storage para asegurar que no hay sesi√≥n
        context.clear_cookies()

        page = context.new_page()

        # Usar directamente un auto conocido (del screenshot del usuario)
        car_url = "http://localhost:4200/cars/f78c8951-b58b-4c6d-9b12-fc394a78e|3f"

        print(f"üöó Navegando directamente a detalle de auto...")
        print(f"   URL: {car_url}")
        page.goto(car_url)
        page.wait_for_timeout(5000)  # Dar m√°s tiempo para que cargue

        # Verificar estado del header (deber√≠a mostrar "Ingresar")
        print("\nüìã VERIFICACI√ìN 1: Bot√≥n de autenticaci√≥n")
        ingresar_button = page.query_selector('text=Ingresar')
        if ingresar_button:
            print("‚úÖ Se muestra bot√≥n 'Ingresar' - Usuario NO autenticado confirmado")
        else:
            print("‚ö†Ô∏è  No se encontr√≥ bot√≥n 'Ingresar' - Puede estar autenticado")

        # Verificar secci√≥n de anfitri√≥n
        print("\nüìã VERIFICACI√ìN 2: Secci√≥n del Anfitri√≥n")

        # Buscar el nombre del anfitri√≥n (EDUARDO MARQUES DA ROSA)
        owner_name = page.query_selector('text=EDUARDO MARQUES DA ROSA')
        login_prompt = page.query_selector('text=Inici√° sesi√≥n para ver los datos del anfitri√≥n')

        if owner_name:
            print("‚ùå ERROR: Se muestra el nombre del anfitri√≥n cuando NO deber√≠a")
            print(f"   Texto encontrado: {owner_name.inner_text()}")
            result_owner = False
        elif login_prompt:
            print("‚úÖ CORRECTO: Se muestra mensaje de login en lugar del anfitri√≥n")
            result_owner = True
        else:
            print("‚ö†Ô∏è  No se encontr√≥ ni el nombre ni el mensaje de login")
            result_owner = False

        # Verificar bot√≥n de reserva
        print("\nüìã VERIFICACI√ìN 3: Bot√≥n de Reserva")

        booking_button = page.query_selector('text=Solicitar reserva')
        login_booking_button = page.query_selector('text=Inicia sesi√≥n para reservar')

        if booking_button:
            print("‚ùå ERROR: Se muestra 'Solicitar reserva' cuando NO deber√≠a")
            result_button = False
        elif login_booking_button:
            print("‚úÖ CORRECTO: Se muestra 'Inicia sesi√≥n para reservar'")
            result_button = True
        else:
            print("‚ö†Ô∏è  No se encontr√≥ ning√∫n bot√≥n de reserva")
            result_button = False

        # Screenshot para evidencia
        screenshot_path = "/home/edu/autorenta/test-unauthenticated.png"
        page.screenshot(path=screenshot_path)
        print(f"\nüì∏ Screenshot guardado en: {screenshot_path}")

        # Mantener navegador abierto un momento para inspecci√≥n manual
        print("\n‚è≥ Navegador abierto 5 segundos para inspecci√≥n...")
        page.wait_for_timeout(5000)

        browser.close()

        # Resultado final
        print("\n" + "="*50)
        print("RESULTADO FINAL:")
        print("="*50)

        if result_owner and result_button:
            print("‚úÖ TODAS las restricciones funcionan correctamente")
            return True
        else:
            print("‚ùå FALL√ì: Las restricciones NO est√°n funcionando")
            if not result_owner:
                print("   - Secci√≥n de anfitri√≥n se muestra cuando NO deber√≠a")
            if not result_button:
                print("   - Bot√≥n de reserva incorrecto")
            return False

if __name__ == "__main__":
    try:
        success = test_unauthenticated_restrictions()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå Error durante la prueba: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
